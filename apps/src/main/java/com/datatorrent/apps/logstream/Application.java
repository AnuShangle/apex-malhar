/*
 * Copyright (c) 2013 DataTorrent, Inc. ALL Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.datatorrent.apps.logstream;

import com.datatorrent.api.DAG;
import com.datatorrent.api.StreamingApplication;
import com.datatorrent.lib.io.ConsoleOutputOperator;
import org.apache.hadoop.conf.Configuration;

/**
 * Log stream processing application based on DataTorrent platform.<br>
 * This application consumes log data generated by running systems and services
 * in near real-time, and processes it to produce actionable data.  This in turn
 * can be used to produce alerts, take corrective actions, or predict system
 * behavior.
 * <p>
 * Running Java Test or Main app in IDE:
 *
 * <pre>
 * LocalMode.runApp(new Application(), 600000); // 10 min run
 * </pre>
 *
 * Output : <br>
 * During successful deployment and run, user should see following output:
 * TODO
 * <pre>
 * </pre>
 *
 * Application DAG : <br>
 * TODO
 * <img src="doc-files/Application.gif" width=600px > <br>
 * <br>
 *
 * Streaming Window Size : 1000 ms(1 Sec) <br>
 * Operator Details : <br>
 * <ul>
 * <li><b>The operator Console: </b> This operator just outputs the input tuples
 * to the console (or stdout). You can use other output adapters if needed.<br>
 * </li>
 * </ul>
 *
 * @since 0.3.5
 */
public class Application implements StreamingApplication
{

  @Override
  public void populateDAG(DAG dag, Configuration conf)
  {

    /*
     * Read log file messages from a messaging system (Redis, RabbitMQ, etc)
     * Typically one message equates to a single line in a log file, but in 
     * some cases may be multiple lines such as java stack trace, etc.
     */
    
    // TODO

    
    /*
     * Convert incoming JSON structures to flattened map objects 
     */
    // TODO 
    
    /*
     * Explode dimensions based on log types ( apache, mysql, syslog, etc)
     */
    // TODO
    
    /*
     * Calculate average, min, max, etc from dimensions ( based on log types )
     */
    //TODO

    /*
     * Websocket output to UI from calculated aggregations
     */
    //TODO

    /*
     * Pattern recognition
     */
    //TODO

    /*
     * Alerts
     */
    //TODO
    
    /*
     * Console output for debugging purposes
     */
    //TODO
    //ConsoleOutputOperator console = dag.addOperator("console", new ConsoleOutputOperator());

  }

}
